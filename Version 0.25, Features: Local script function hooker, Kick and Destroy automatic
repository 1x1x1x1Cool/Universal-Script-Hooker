local METHOD = "Kick"
local _Check = "LocalPlayer"
local constants = {}
local functions = {}
local wanted = {}
local wanted2 = {}
local newconstants = {}
local WANTEDSCRIPT = {}
for i,v2 in pairs(game:GetDescendants()) do
if v2:IsA("LocalScript") then
local LOCALSCRIPTD = v2
local script = getprotos(getscriptclosure(v2))
for index,v in pairs(script) do
for i,b in pairs(getconstants(v)) do
    table.insert(constants, b)
    if b == METHOD then
      table.insert(functions, v)
      table.insert(newconstants, b)
      table.insert(wanted, i)
      table.insert(wanted2, index)
      print(b .. " found at:" .. v2.Name)
      table.insert(WANTEDSCRIPT, LOCALSCRIPTD)
      end
  end
end
end
end

local function Contains_Number(string)
if table.concat(string:split("1")) ~= string then 
    return true 
elseif table.concat(string:split("2")) ~= string then
   return true 
elseif table.concat(string:split("3")) ~= string then
    return true 
elseif table.concat(string:split("4")) ~= string then
    return true 
    elseif table.concat(string:split("5")) ~= string then
    return true 
    elseif table.concat(string:split("6")) ~= string then
    return true 
    elseif table.concat(string:split("7")) ~= string then
    return true 
    elseif table.concat(string:split("8")) ~= string then
    return true 
    elseif table.concat(string:split("9")) ~= string then
    return true 
    elseif table.concat(string:split("0")) ~= string then
    return true 
else 
    return false 
end 
end 

local newwanted = {}
for i,v in pairs(constants) do
 if v == METHOD  then
     table.insert(newwanted, i)
 end
end

function is_player_Children(string)
for i,v in pairs(game:GetService("Players").LocalPlayer.Character:GetDescendants()) do
  if v.Name == string then
  return true
  else
      return false
  end    
  end
end 


local scripttohook = {}
for i,v in pairs(newwanted) do
    -- Team change remote event checker
     if METHOD == "FireServer" and BrickColor.new(constants[newwanted[i] - 1]) ~= BrickColor.new("Medium stone grey")  then 
         warn(" Possible Team RemoteEvent found at script:", WANTEDSCRIPT[i])
          end 
     
     
     
     
     
     
  -- Destroy checker
if  WANTEDSCRIPT[i].Parent.Name == game:GetService("Players").LocalPlayer.Name and METHOD == "Destroy" then
   if  constants[newwanted[i] - 1] == "Parent" or constants[newwanted[i] - 2] == "Parent" or is_player_Children(constants[newwanted[i] - 2]) == true or is_player_Children(constants[newwanted[i] - 1]) == true  then
       warn(METHOD," method applied on localplayer by;",  WANTEDSCRIPT[i])
       table.insert(scripttohook, WANTEDSCRIPT[i])
   end
end


 if METHOD == "Kick" then 
 local script = decompile(getscriptclosure(WANTEDSCRIPT[i]))
 local table1 = script:split("\n")
 for i,v in pairs(table1) do 
     if table.concat(v:split("Kick")) ~= v then 
         if table.concat(v:split("LocalPlayer")) ~= v then 
             if WANTEDSCRIPT[i] ~= nil then 
             warn("Kick variable found at:", WANTEDSCRIPT[i])
             end 
         end
     end 
 end 
 end 

-- Kick checker
 if  WANTEDSCRIPT[i].Parent.Name == game:GetService("Players").LocalPlayer.Name and METHOD == "Kick" then
     print(constants[newwanted[i] - 1])
   if  constants[newwanted[i] - 1] == "Parent" or constants[newwanted[i] - 2] == "Parent" or is_player_Children(constants[newwanted[i] - 2]) == true or is_player_Children(constants[newwanted[i] - 1]) == true or Contains_Number(constants[newwanted[i] - 1]) == true  then
       warn(METHOD," method applied on localplayer by;",  WANTEDSCRIPT[i])
       table.insert(scripttohook, WANTEDSCRIPT[i])
   end
 end

  print(WANTEDSCRIPT[i],METHOD .." at function",getinfo(functions[i]).name, functions[i])
  -- NOTE: makes part of the loop
  if constants[newwanted[i] - 2] == _Check or constants[newwanted[i] - 1] == _Check then
    warn(METHOD, "on " .. _Check .. " found!", "script name:" ,WANTEDSCRIPT[i])
            table.insert(scripttohook, WANTEDSCRIPT[i])
end

end


print("\n\n".. #newwanted.. " " .. METHOD .. " constants " .. "Found!" .. " On a total of: " .. #constants .. " constants" .. "\n")

for i,v in pairs(scripttohook) do
local X;
X = hookmetamethod(v, "__namecall",function(self,...)
local args = {...};
local method = getnamecallmethod()
if method == METHOD  then
    return
end
return X(self,...)
end)
end
